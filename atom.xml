<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kid's blog]]></title>
  <link href="www.1412.name/atom.xml" rel="self"/>
  <link href="www.1412.name/"/>
  <updated>2016-07-28T15:39:34+08:00</updated>
  <id>www.1412.name/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[shadowsocks-libev安装]]></title>
    <link href="www.1412.name/14696960194399.html"/>
    <updated>2016-07-28T16:53:39+08:00</updated>
    <id>www.1412.name/14696960194399.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0"><a href="http://www.vultr.com/?ref=6938970-3B">vultr</a></h2>

<p>在此之前你必须拥有一台国外的vps，在我比较了很多服务商（digitalocean，Linode等）之后，从性价比角度我选择了<a href="http://www.vultr.com/?ref=6938970-3B">vultr</a>  这家，你可以选择用信用卡方式注册或用PayPal，信用卡注册至少要10美元充值激活，PayPal需要5美元充值激活。Linode每月至少10美元太贵了，digitalocean的机器已经不如当年。vultr这家不错，我不是托，我确实测试过。而且有大量的优惠码。注册成功后就申请一台每月5美元的linux的vps吧，系统debian或CentOS都可以。基于此你必须要懂linux基础，负责会一头雾水，另外这东西没人会用windows去做。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_1">参考</h2>

<p><a href="https://softwaredownload.gitbooks.io/openwrt-fanqiang/content/index.html">翻墙神噐github书</a> 我是参考的本书，并简要整理了这篇笔记，需要的也可看一下</p>

<p>shadowsocks-libev的网络安装方式可参考<a href="https://github.com/shadowsocks/shadowsocks-libev">官网</a>或<a href="https://softwaredownload.gitbooks.io/openwrt-fanqiang/content/index.html">翻墙神噐github书</a>的第3章   （我没有成功，请使用手动安装方式）会提示：网络安装没有找到包。</p>

<p>顺便再提示一点，原shadowsocks才是风靡网络的大杀器，但是作者被请去喝茶了，之后shadowsocks的源码就在github上删除了。<br/>
我们现在用的这个 shadowsocks-libev是个测试版，很多原shadowsocks开发的第三方工具都不支持的。如shadowsocks-manager。</p>

<p><strong>以下是我的简要整理笔记：</strong></p>

<h2 id="toc_2">手动安装</h2>

<pre><code>#下载最新版本的shadowsocks-libev
git clone https://github.com/madeye/shadowsocks-libev.git    

cd shadowsocks-libev

#本地编译
./configure &amp;&amp; make       

make install 
    
</code></pre>

<h2 id="toc_3">编辑配置</h2>

<pre><code>vi /etc/shadowsocks.json

{
&quot;server&quot;:&quot;0.0.0.0&quot;,
&quot;server_port&quot;:1098,             #服务端的端口，可随意设定
&quot;local_address&quot;: &quot;127.0.0.1&quot;,
&quot;local_port&quot;:1080,
&quot;password&quot;:&quot;123456&quot;,                 #这里可随便设定密码
&quot;timeout&quot;:300,
&quot;method&quot;:&quot;aes-256-cfb&quot;,
&quot;fast_open&quot;: false
}

</code></pre>

<h2 id="toc_4">启动方式</h2>

<p>用如下代码启动</p>

<p><code>nohup /usr/local/bin/ss-server -c /etc/shadowsocks.json -u &amp;</code></p>

<h2 id="toc_5">shadowsocks的服务</h2>

<p><code>ps ax | grep ss-server</code> 用此命令可查看shadowsocks的进程是否启动</p>

<pre><code>2142 ?        Ss     0:08 /usr/local/bin/ss-server -c /etc/shadowsocks-libev/config1.json -a root -u -f /var/run/shadowsocks-1.pid
</code></pre>

<h2 id="toc_6">shadowsocks的客户端地址</h2>

<p><a href="https://shadowsocks.org/en/download/clients.html">https://shadowsocks.org/en/download/clients.html</a>     从这个地址下载对应的客户端就可以科学上网了</p>

<h2 id="toc_7">多端口配置</h2>

<pre><code>#!/bin/bash
 DAEMON=/usr/local/bin/ss-server
# 配置文件1
CONFFILE1=/etc/shadowsocks-libev/config1.json
# 相应的进程PID文件
PIDFILE1=/var/run/shadowsocks-1.pid
# 启动ss-server
start-stop-daemon --start --quiet --pidfile $PIDFILE1 --chuid root:root --exec $
DAEMON -- \
        -c &quot;$CONFFILE1&quot; -a &quot;root&quot; -u -f $PIDFILE1
# 配置文件2
CONFFILE2=/etc/shadowsocks-libev/config2.json
PIDFILE2=/var/run/shadowsocks-2.pid
start-stop-daemon --start --quiet --pidfile $PIDFILE2 --chuid root:root --exec $
DAEMON -- \
        -c &quot;$CONFFILE2&quot; -a &quot;root&quot; -u -f $PIDFILE2
# 配置文件3

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux账号与用户组相关文件详解]]></title>
    <link href="www.1412.name/14694259379580.html"/>
    <updated>2016-07-25T13:52:17+08:00</updated>
    <id>www.1412.name/14694259379580.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">相关文件</a>
</li>
<li>
<a href="#toc_1">/etc/passwd字段详解</a>
</li>
<li>
<a href="#toc_2">/etc/shadow （mac无此文件）文件字段详解</a>
</li>
<li>
<a href="#toc_3">/etc/group 文件字段详解</a>
</li>
<li>
<a href="#toc_4">/etc/gshadow （mac无此文件）  文件字段详解</a>
</li>
</ul>


<p><strong>很多程序的运行都与权限有关，而权限与UID和GID有关，理解下面的这些文件对于账号的管理是必须的</strong></p>

<h2 id="toc_0">相关文件</h2>

<pre><code>1. /etc/passwd      此文件包含了该系统下的所有账号信息
2. /etc/group       此文件包含了该系统的所有组名
3. /etc/shadow      此文件包含了该系统所有账号的密码
4. /etc/gshadow     涉及到用户组管理员的功能，很少用到
</code></pre>

<span id="more"></span><!-- more -->

<h2 id="toc_1">/etc/passwd字段详解</h2>

<p><strong>此文件每一行代表一个账号信息，有几行就代表有几个账号在你的系统中！</strong></p>

<pre><code>root:x:0:0:root:/root:/bin/zsh
kid:x:500:500:crxy:/home/crxy:/bin/bash
</code></pre>

<p><strong>每个字段用“:”隔开，共有7个字段。</strong><br/>
<strong>字段1：</strong>账号的名称</p>

<p><strong>字段2：</strong>密码位置，在Unix的历史中，密码曾经放在此位置，因为不安全所以统一移至/etc/shadow中了，现在都用X来代替</p>

<p><strong>字段3：</strong>UID</p>

<table>
<thead>
<tr>
<th>id范围</th>
<th>该id用户特性</th>
</tr>
</thead>

<tbody>
<tr>
<td>0</td>
<td>0就是系统管理员,如果想让其他账号名称也具有root权限时， 将该账号的UID改为0就可以<br>系统级管理员可以有多个，但不建议由多个账号的UID是0</td>
</tr>
<tr>
<td>1~499</td>
<td>给系统使用的<br>1~99，由distributions自行创建的系统账号<br>100~499 ,若用户有系统账号需求时，可以使用的账号ID</td>
</tr>
<tr>
<td>500~</td>
<td>给一般账户使用的</td>
</tr>
</tbody>
</table>

<p><strong>字段4：</strong>GID,同过此id可在/etc/group中找到对应组名</p>

<p><strong>字段5：</strong>用户信息说明，与finger 功能有关，用户信息可以通过chfn命令来更改</p>

<p><strong>字段6：</strong>主文件夹，修改之后，下次用户登录就会去修改的地方做为该用户的主文件夹</p>

<p><strong>字段7：</strong>Shell，该用户默认使用的shell，有个shell可以用来替代成让账号无法取得shell环境的登录操作，/sbin/nologin.    </p>

<h2 id="toc_2">/etc/shadow （mac无此文件）文件字段详解</h2>

<p><strong>注意：root账户拥有此文件的rw权限，普通用户只有r权限，最好不要修改此文件的权限</strong></p>

<pre><code>root:$1$kesiPNZJ$GrvjUklAs3CgKlDDtSC351:16677:0:99999:7:::
kid:$1$b2kVrloR$utJ1aobrkf7aWHLHsYer4/:16208:0:99999:7:::
</code></pre>

<p><strong>以“:”分割共9个字段</strong></p>

<p><strong>字段1：</strong>账号名称</p>

<p><strong>字段2：</strong>密码（经过加密的）</p>

<p><strong>字段3：</strong>最近改变密码的日期（以1970年1月1日作为1而进行累加的天数。如果你改密码的日期是1971年1月1日，则此出就显示366，也就刚好是1年）</p>

<p><strong>字段4：</strong>密码不可被改动的天数，就是修改日期后要多久才能再次修改，如果是0，则可随意修改</p>

<p><strong>字段5：</strong>密码隔多少天必须修改的天数，如50，就是50天后必须修改，如果是99999，则意味着没有强制修改性</p>

<p><strong>字段6：</strong>密码需要更改前的警告天数。如5，则会在密码快过期的前5天会发出警告让您修改密码</p>

<p><strong>字段7：</strong>密码过期后账号宽限天数，前面3至6字段都是设置密码过期相关，密码过期不等于密码失效，当密码过期后，还可以再登陆到bash，只是linux会强制让你修改密码，然而密码失效则再也登录不上linux了。此处如果为3，则密码过期后可以宽限你3天。</p>

<p><strong>字段8：</strong>账号失效日期，（以1970年1月1日作为1而进行累加的天数）假设你的linux的系统时间为1970年5月1日，想要在1971年的1月1日让密码失效，则此处为365-122+1=244天。此处填244就可达到目的。</p>

<p><strong>字段9：</strong>保留字段。</p>

<p><strong>如果用户在给定的期限内改动了密码，则对应的各个字段会相应的变动。</strong></p>

<h2 id="toc_3">/etc/group 文件字段详解</h2>

<p><strong>以“:”分割共4个字段</strong></p>

<p><strong>字段1：</strong>用户组名称</p>

<p><strong>字段2：</strong>用户组密码，通常是给用户组管理员用的。很少用，通常不需要设置</p>

<p><strong>字段3：</strong>GID 用户组的ID</p>

<p><strong>字段4：</strong>此用户组所支持的用户名称，添加某成员到指定用户组，直接修改在此字段上加入就可以</p>

<p><strong>初始用户组：</strong>在/etc/passwd中的GID就为该用户的初始用户组，用户在登录后就会主动取得。</p>

<p><strong>有效用户组：</strong>一个用户在加入了多个用户组后，即可对这些组所规定的权限进行操作，但是这些都是对已经存在的文件而言的，如果此用户要新建一个文件，那么此文件到底所属哪个用户组呢，那就看建立这个文件时，此用户的有效用户组是谁。有效用户组可在此用户所支持的组中进行切换。</p>

<p>命令：<br/>
<code>groups</code> 列出当前账户所在的用户组，第一个用户组即为有效用户组<br/>
<code>newgrp   users</code>切换当前用户的有效用户组为users。 此命令会另外一个shell 来提供这个功能。 如果退回到原来的环境，可用exit</p>

<h2 id="toc_4">/etc/gshadow （mac无此文件）  文件字段详解</h2>

<p><strong>以“:”分割共4个字段</strong></p>

<p><strong>字段1：</strong>用户组名</p>

<p><strong>字段2：</strong>密码列，如果是“!” 说明该用户组没有组管理员</p>

<p><strong>字段3：</strong>用户组管理员账号</p>

<p><strong>字段4：</strong>该用户组有哪些账号账号成员与/etc/group 内容相同</p>

<p><strong>用户组管理员功能很少用到</strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用户身份切换（su与sudo）]]></title>
    <link href="www.1412.name/14696853158049.html"/>
    <updated>2016-07-28T13:55:15+08:00</updated>
    <id>www.1412.name/14696853158049.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">su命令</a>
</li>
<li>
<a href="#toc_1">sudo命令</a>
<ul>
<li>
<a href="#toc_2">给用户组设置sudo</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">su命令</h2>

<p><code>su</code> 单纯的使用su命令，读取的变量设置方式为non-login shell的方式，这种方式下很多原本的变量不会被改变。如PATH  USER 等。</p>

<p><code>su -</code>  在大多数情况下应用此命令来切换成root，这种方式将用login-shell 的方式。退出root时用<code>exit</code>  .</p>

<p><code>su - -c &quot;more  /etc/shadow&quot;</code>  当想要用root权限执行完一条命令后立马切回到当前用户时使用此命令，-c 后面直接接命令。</p>

<p><code>su -l   用户名</code>  或<code>su -  用户名</code>  使用此命令可随意切换成其他账号，前提是必须用于这些账号的密码，切换后的账号完全拥有该账号的各种环境变量。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_1">sudo命令</h2>

<p><strong>su使用的是指定账号的密码换言之就是想变成谁就用谁的密码，而sudo是使用自己的密码</strong></p>

<p>某用户要想使用sudo命令的前提是,必须由root账户给你相应的权限，也就是修改这个文件/etc/sudoers<br/>
因为/etc/sudoers是有语法的，所以需要用命令<code>visudo</code>来进行编辑</p>

<pre><code>root  ALL=(ALL)  ALL    #默认
kid   ALL=(ALL)  ALL    #将kid用户设置为可执行sudo命令
</code></pre>

<p><strong>第一列：</strong>用户账户，系统指定哪些账号可以使用sudo命令，默认为root账号</p>

<p><strong>第二列：</strong>登录者的来源主机名和可切换的身份，ALL表示所有主机，（ALL）可切换成任意身份</p>

<p><strong>第三列：</strong>可执行的命令：ALL 表示可执行任何命令</p>

<p><strong>示例</strong></p>

<pre><code>#表示myuser1在任何客户端主机都可执行，但只能切换成roo身份， 可使用passwd命令+任意用户名，
#但不可以给root修改密码。这是个很典型的应用示例
myuser1 ALL=(root)  !/usr/bin/passwd,/usr/bin/passwd [A-Za-z]*,!/usr/bin/passwd root

</code></pre>

<h3 id="toc_2">给用户组设置sudo</h3>

<pre><code>#表示wheel内的任何成员都可以在任意主机变换任意身份执行任何命令
#用户组可随意设置。
%wheel  ALL=(ALL)   ALL 
</code></pre>

<pre><code>#表示wheel内的任何成员都可以在任意主机变换任意身份执行任何命令，执行命令时连自己的密码都可以不用输入
%wheel  ALL=(ALL)   NOPASSWD:ALL  
</code></pre>

<p><strong>sudo的默认时间间隔为5分钟，也就是在一次输入密码后的5分钟之内再执行sudo命令时不需要使用密码</strong></p>

]]></content>
  </entry>
  
</feed>
